/**
 * DECORADORES EN TYPESCRIPT
 * =======================
 * 
 * Los decoradores son funciones especiales que nos permiten
 * a√±adir metadatos y modificar clases y sus miembros.
 */

// Decorador de clase actualizado
function logger(value: typeof Empleado, context: ClassDecoratorContext) {
    return class extends value {
        constructor(nombre: string) {
            console.log(`Clase ${value.name} instanciada el: ${new Date()}`);
            super(nombre);
        }
    };
}

// Decorador de m√©todo actualizado
function deprecated(mensaje?: string) {
    return function(target: any, context: ClassMethodDecoratorContext) {
        const metodoOriginal = target;
        return function(this: any, ...args: any[]) {
            console.warn(`‚ö†Ô∏è M√©todo ${context.name.toString()} est√° deprecado. ${mensaje || ''}`);
            return metodoOriginal.apply(this, args);
        }
    }
}

// Decorador de propiedad actualizado
function validarLongitud(min: number, max: number) {
    return function(target: any, context: ClassFieldDecoratorContext) {
        return function(this: any, value: string) {
            if (value.length < min || value.length > max) {
                throw new Error(`La longitud debe estar entre ${min} y ${max} caracteres`);
            }
            return value;
        }
    }
}

// Ejemplo de uso de decoradores
@logger
class Empleado {
    @validarLongitud(3, 50)
    nombre: string;

    constructor(nombre: string) {
        this.nombre = nombre;
    }

    @deprecated("Usar 'obtenerInformacion' en su lugar")
    getDatos() {
        return `Empleado: ${this.nombre}`;
    }

    obtenerInformacion() {
        return `Informaci√≥n del empleado: ${this.nombre}`;
    }
}

// Ejercicios pr√°cticos
// 1. Crear un decorador que valide par√°metros de m√©todo
// 2. Implementar un decorador de cache para m√©todos
// 3. Crear un decorador que mida el tiempo de ejecuci√≥n 

/**
 * DECORADORES üéÄ
 * ============
 * 
 * ¬°Vamos a poner stickers m√°gicos a nuestro c√≥digo!
 * Como cuando decoras tu cuaderno con calcoman√≠as.
 */

// Decorador de clase actualizado
function brillante(value: any, context: ClassDecoratorContext) {
    console.log("‚ú® ¬°Esta clase brilla! ‚ú®");
    return value;
}

// Decorador de m√©todo actualizado
function haceSonido(target: any, context: ClassMethodDecoratorContext) {
    const metodoOriginal = target;
    return function(this: any, ...args: any[]) {
        console.log("üîä ¬°Ding!");
        return metodoOriginal.apply(this, args);
    }
}

// Uso de decoradores üé®
@brillante
class JugueteMagico {
    @haceSonido
    jugar() {
        return "¬°Estoy jugando!";
    }
}

// Ejercicios divertidos üéÆ
// 1. Crea un decorador que cuente cu√°ntas veces se usa un m√©todo
// 2. Crea un decorador que agregue un color a una clase
// 3. Crea un decorador que haga que un m√©todo sea m√°s lento 
// 3. Crea un decorador que haga que un m√©todo sea m√°s lento 