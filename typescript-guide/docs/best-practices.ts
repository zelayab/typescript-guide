/**
 * GU√çA DE MEJORES PR√ÅCTICAS DE TYPESCRIPT üìö
 * =====================================
 * 
 * Una gu√≠a completa de las mejores pr√°cticas para escribir
 * c√≥digo TypeScript mantenible, seguro y eficiente.
 */

// 1. TIPOS Y INTERFACES üìù
// =====================

/**
 * - Prefiere interfaces para APIs p√∫blicas
 * - Usa types para uniones y tipos utilitarios
 * - Evita el tipo 'any'
 */

// ‚úÖ Bien
interface Usuario {
    id: number;
    nombre: string;
    email: string;
}

// ‚ùå Mal
type UsuarioType = {
    id: any;
    nombre: any;
    email: any;
}

// 2. GEN√âRICOS üéÅ
// ============

/**
 * - Usa nombres descriptivos para par√°metros gen√©ricos
 * - A√±ade restricciones cuando sea necesario
 * - Documenta el prop√≥sito de cada par√°metro
 */

// ‚úÖ Bien
function obtenerPrimero<TElemento extends object>(array: TElemento[]): TElemento | undefined {
    return array[0];
}

// ‚ùå Mal
function getPrimero<T>(a: T[]): T | undefined {
    return a[0];
}

// 3. FUNCIONES üéØ
// ============

/**
 * - Define tipos de retorno expl√≠citos
 * - Usa par√°metros opcionales en lugar de undefined
 * - Implementa manejo de errores adecuado
 */

// ‚úÖ Bien
function calcularTotal(precios: number[], descuento?: number): number {
    try {
        return precios.reduce((total, precio) => 
            total + precio * (1 - (descuento || 0)), 0);
    } catch (error) {
        throw new Error(`Error al calcular total: ${error.message}`);
    }
}

// 4. CLASES Y DECORADORES üè∞
// ======================

/**
 * - Usa modificadores de acceso
 * - Implementa interfaces expl√≠citamente
 * - Mant√©n las clases peque√±as y enfocadas
 */

// ‚úÖ Bien
class CarritoCompras implements ICarrito {
    private items: Producto[] = [];

    agregarProducto(producto: Producto): void {
        this.items.push(producto);
    }
}

// 5. PATRONES AS√çNCRONOS ‚è≥
// =====================

/**
 * - Usa async/await sobre promesas directas
 * - Maneja errores con try/catch
 * - Tipifica las respuestas de API
 */

// ‚úÖ Bien
async function obtenerDatos<T>(url: string): Promise<T> {
    try {
        const respuesta = await fetch(url);
        if (!respuesta.ok) {
            throw new Error(`HTTP error: ${respuesta.status}`);
        }
        return await respuesta.json();
    } catch (error) {
        throw new Error(`Error al obtener datos: ${error.message}`);
    }
}

// 6. ORGANIZACI√ìN DE C√ìDIGO üìÇ
// ========================

/**
 * - Usa barrel exports (index.ts)
 * - Agrupa por funcionalidad
 * - Mant√©n una estructura clara de directorios
 */

// ‚úÖ Bien - En index.ts
export * from './usuarios/usuario.controller';
export * from './usuarios/usuario.model';
export * from './usuarios/usuario.service';

// 7. TESTING üß™
// ==========

/**
 * - Escribe tests unitarios para l√≥gica de tipos
 * - Usa fixtures tipados
 * - Implementa mocks tipados
 */

// ‚úÖ Bien
interface TestFixture {
    entrada: Usuario;
    esperado: ResultadoProcesado;
}

const casos: TestFixture[] = [
    {
        entrada: { id: 1, nombre: 'Test' },
        esperado: { procesado: true }
    }
];

// 8. RENDIMIENTO ‚ö°
// =============

/**
 * - Usa tipos condicionales con moderaci√≥n
 * - Implementa lazy loading cuando sea posible
 * - Optimiza la inferencia de tipos
 */

// ‚úÖ Bien
type OptimizedConditional<T> = T extends string 
    ? StringProcessResult 
    : NumberProcessResult;

// 9. SEGURIDAD üîí
// ============

/**
 * - Valida entrada de usuario
 * - Usa tipos estrictos
 * - Implementa comprobaciones en tiempo de ejecuci√≥n
 */

// ‚úÖ Bien
function procesarEntradaUsuario(entrada: unknown): ProcessedData {
    if (!esEntradaValida(entrada)) {
        throw new Error('Entrada inv√°lida');
    }
    return procesarDatos(entrada);
} 